// _mixins.scss
$breakpoints: (
  'mobile': (350px, 959px),      // ширина 350‑1023 — высота не важна
  'tablet-desktop': (960px, 4000px) // ширина 1024‑4000 + ВЫСОТА ≥ 700
);

// универсальный миксин + спец‑кейс для tablet‑desktop
@mixin respond-to($bp) {
  // 1️⃣ tablet‑desktop: ширина + высота
  @if $bp == 'tablet-desktop' {
    $range: map-get($breakpoints, 'tablet-desktop');

    @media (min-width: nth($range, 1))       // ≥ 1024 px
           and (max-width: nth($range, 2))   // ≤ 4000 px
           and (min-height: 640px) {         // ≥ 660 px
      @content;
    }

  // 2️⃣ любой другой брейкпоинт из карты
  } @else if map-has-key($breakpoints, $bp) {
    $val: map-get($breakpoints, $bp);

    @if length($val) == 2 { // диапазон ширины
      @media (min-width: nth($val, 1)) and (max-width: nth($val, 2)) {
        @content;
      }
    } @else if (type-of($val) == 'number' or type-of($val) == 'string') { // одно значение
      @media (min-width: #{$val}) {
        @content;
      }
    }

  } @else {
    @warn "Брейкпоинт `#{$bp}` не определён.";
  }
}

// универсальный: задай любые min/max для width/height
@mixin respond-dims($min-w: null, $max-w: null, $min-h: null, $max-h: null) {
  $mq: "all";

  @if $min-w != null { $mq: $mq + " and (min-width: #{$min-w})"; }
  @if $max-w != null { $mq: $mq + " and (max-width: #{$max-w})"; }
  @if $min-h != null { $mq: $mq + " and (min-height: #{$min-h})"; }
  @if $max-h != null { $mq: $mq + " and (max-height: #{$max-h})"; }

  @media #{unquote($mq)} { @content; }
}
